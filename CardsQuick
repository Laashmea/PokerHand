class CardsQuick
{
  private String [] arr;
  private String [] sendArr  = new String [5];
  private int num = 0;
  private String collect;
  private boolean error = false;
  
  CardsQuick (String[] a)
  {
    arr = a;  
    valueChange();
  }
  
  public void  valueChange() 
  { 
    int newArr [] = new int [arr.length];
    
    // give numerical values to each card
    try
    {
      for (int i = 0; i < arr.length; i++)
      {
        if ( arr[i].charAt(1)== ('T'))
        {
          num = 100;
        }
        else if ( arr[i].charAt(1)==('J'))
        {
          num = 110; 
        }
        else if ( arr[i].charAt(1)==('Q'))
        {
          num = 120;
        }
        else if ( arr[i].charAt(1)==('K'))
        {
          num = 130;
        }
        else if ( arr[i].charAt(1)==('A'))
        {
          num = 140;
        }
        else
        {
          String transit = arr[i].charAt(1) + "";
          num = 10 * Integer.parseInt(transit);
        }
        
        if ( arr[i].charAt(0)==('S'))
        {
          num = 1 + num;
        }
        else if (arr[i].charAt(0)==('H'))
        {
          num = 2 + num;
        }
        else if (arr[i].charAt(0)==('D'))
        {
          num = 3 + num;
        }
        else if (arr[i].charAt(0)==('C'))
        {
          num = 4 + num;
        }
        newArr [i] = num;
      }
      
      quickSort ( newArr, 0, ((arr.length)-1)); 
    }
    catch (Exception ex)
    {
      error = true;
    }
  }
  
  public void quickSort (int newArr[], int start, int end)
  {
    
    if (start < end)
    {
      /*
       rearrange into 2 sub arrays, from newArr[start] to newArr[split]
       and from newArr[split + 1] to newArr[end] in such a way that every
       element in the left part is less than or equal to the every
       element in the right part
       */
      
      int split = partition (newArr, start, end);
      
      // sort the left sublist
      quickSort (newArr, start, split);
      
      // then sort the right sublist   
      quickSort (newArr, split + 1, end);
    }
    
    else if ((start == (newArr.length) -1) && (end == (newArr.length)-1)) // when the numbers are done sorting switch the number values back to face cards
    {
      // convert back all numerical values to card values
      for (int i = 0; i < sendArr.length; i++)
      {
        String convert = newArr[i] + "";
        
        if (convert.substring (0,2).equals("10"))
        {
          collect = "T" + convert.charAt(2);
        }
        else if (convert.substring (0,2).equals("11"))
        {
          collect = "J" + convert.charAt(2);
        }
        else if (convert.substring (0,2).equals("12"))
        {
          collect = "Q" + convert.charAt(2);
        }
        else if (convert.substring (0,2).equals("13"))
        {
          collect = "K" + convert.charAt(2);
        }
        else if (convert.substring (0,2).equals("14"))
        {
          collect = "A" + convert.charAt(2);
        }
        else
        {
          collect = convert;
        }
        
        if (collect.charAt(1) == '4')
        {
          collect = "C" + collect.charAt(0);
        }
        else if (collect.charAt(1) == '3')
        {
          collect = "D" + collect.charAt(0);
        }
        else if (collect.charAt(1) == '2')
        {
          collect = "H" + collect.charAt(0);
        }
        else if (collect.charAt(1) == '1')
        {
          collect = "S" + collect.charAt(0);
        }
        
        sendArr[i] = collect;
      }
    }
  } // quickSort method
  
  // rearrange the portion of the array newArr[] so that each element
  // in newArr[start]....newArr[split] is less than or equal to each element in
  // newArr[split + 1].....newArr[end], and return the index split.
  
  public int partition (int newArr[], int start, int end)
  {
    // start with 2 indices, top and bottom,
    // just outside of the list we are partitioning
    
    int bottom = start - 1;
    int top = end + 1;
    
    // pick a value pivot. Arrange the list according to:  <= or >= to pivot
    int pivot = newArr [start];
    // walk bottom and top towards each other, using them to swap array
    // elements as we go, and stopping when bottom and top pass each other.
    
    while (bottom < top)
    {
      // walk until you find an element that is not in its current sublist
      do
      {
        bottom++;
      }
      while (newArr [bottom] > pivot);
      
      do
      {
        top--;
      }
      while (newArr [top] < pivot);
      
      // swap newArr[bottom] and newArr[top], thus putting the values in the
      // correct sublist
      
      int temp = newArr [bottom];
      newArr [bottom] = newArr [top];
      newArr [top] = temp;
    }
    
    // undo the last swap that took place after the bottom and top
    // indices passed each other.
    
    int temp = newArr [bottom];
    newArr [bottom] = newArr [top];
    newArr [top] = temp;
    
    // finally, return split index
    return top;
    
  } // partition method
  
  String [] quickCards ()
  { 
    return sendArr;
  }
  
  boolean ifSortError()
  {
    return error;
  }
} //CardsQuick class
